{"version":3,"file":"stringeditor.min.js","sources":["../src/stringeditor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     filter_multilingual/stringeditor\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Parse HTMl Nodes\n *\n * Parse HTML nodes into a flat object\n * @param {nodes} nodes HTML Nodes\n * @returns {object}\n */\nexport const parseNodes = (nodes) => {\n  let processedNodes = [];\n\n  nodes.forEach((node) => {\n    if (node.childElementCount === 0) {\n      processedNodes.push(parseNode(node));\n    } else {\n      node.childNodes.forEach((childNode) => {\n        processedNodes.push(processNode(childNode));\n      });\n    }\n  });\n\n  return processedNodes;\n};\n\n/**\n * HTML String Editor\n * @param {object} nodes Nodes from parseNodes\n * @returns {object}\n */\nexport const outputEditor = (nodes) => {\n  let editor = document.createElement(\"form\");\n  editor.classList.add(\"container-fluid\");\n\n  let specialProcessing = [\"iframe\", \"img\"];\n\n  nodes.forEach((node) => {\n    let input = \"\";\n    let inputClasses = [\"multilingual-editor\", \"col-10\"];\n\n    // Create input element\n    input = document.createElement(\"div\");\n    input.classList.add(...inputClasses);\n    input.contentEditable = true;\n\n    // Input Processing\n    if (!specialProcessing.includes(node.localName)) {\n      input.innerHTML = node.node.innerHTML;\n    } else {\n      input.innerHTML = node.node.attributes.src;\n    }\n\n    // Indicator\n    let localName = document.createElement(\"div\");\n    let localNameClasses = [\n      \"col-2\",\n      \"text-right\",\n      \"bg-light\",\n      \"align-middle\",\n      \"small\",\n      \"pt-2\"\n    ];\n    localName.classList.add(...localNameClasses);\n    localName.innerHTML = node.localName;\n\n    // Add input to paragraph element\n    let div = document.createElement(\"div\");\n    let divClasses = [\"mb-2\", \"row\"];\n    if (node.node.innerHTML.length === 0 && !specialProcessing.includes(node.localName)) {\n      divClasses.push('d-none');\n    }\n    div.classList.add(...divClasses);\n    div.append(input);\n    div.append(localName);\n\n    editor.append(div);\n  });\n\n  return editor;\n};\n\n/**\n * Convert a template string into HTML DOM nodes\n * @param  {String} string The template string\n * @return {Node}       The template HTML\n */\nexport const stringToHTML = (string) => {\n  string = string.trim().replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n\n  // See if DOMParser is supported\n  var support = (() => {\n    if (!window.DOMParser) {\n      return false;\n    }\n    var parser = new DOMParser();\n    try {\n      parser.parseFromString(\"x\", \"text/html\");\n    } catch (err) {\n      return false;\n    }\n    return true;\n  })();\n\n  // If DOMParser is supported, use it\n  if (support) {\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(string, \"text/html\");\n    return doc.body.childNodes;\n  }\n\n  // Otherwise, fallback to old-school method\n  var dom = document.createElement(\"div\");\n  dom.innerHTML = string;\n  return dom;\n};\n\n/**\n * Parse HTML Node\n * @param {Node} node HTML Node\n * @returns {Ojbect}\n */\nconst parseNode = (node) => {\n  let parsedNode = {};\n  parsedNode.localName = node.localName;\n  parsedNode.key = keyGenerator(node.localName, node);\n  parsedNode.node = node;\n\n  return parsedNode;\n};\n\n/**\n * Process Node\n *\n * Recursively loop to get last child node\n * @param {Node} node HTML Node\n * @returns {Node}\n */\nconst processNode = (node) => {\n  if (node.childElementCount !== 0) {\n    node.childNodes.forEach((childNode) => {\n      return processNode(childNode);\n    });\n  }\n  return parseNode(node);\n};\n\n/**\n * Key Generator\n * @param {String} localName Local Name of Node\n * @param {Node} node HTML Node\n * @returns {String}\n */\nconst keyGenerator = (localName, node) => {\n  if (node.parentNode.localName !== \"body\") {\n    let parentLocalName = node.parentNode.localName + \"[\" + localName + \"]\";\n    return keyGenerator(parentLocalName, node.parentNode);\n  }\n  return localName;\n};\n"],"names":["nodes","processedNodes","forEach","node","childElementCount","push","parseNode","childNodes","childNode","processNode","editor","document","createElement","classList","add","specialProcessing","input","contentEditable","includes","localName","innerHTML","attributes","src","div","divClasses","length","append","string","trim","replace","support","window","DOMParser","parser","parseFromString","err","body","dom","parsedNode","key","keyGenerator","parentNode"],"mappings":"6NA4B0B,SAACA,WACrBC,eAAiB,UAErBD,MAAME,SAAQ,SAACC,MACkB,IAA3BA,KAAKC,kBACPH,eAAeI,KAAKC,UAAUH,OAE9BA,KAAKI,WAAWL,SAAQ,SAACM,WACvBP,eAAeI,KAAKI,YAAYD,kBAK/BP,sCAQmB,SAACD,WACvBU,OAASC,SAASC,cAAc,QACpCF,OAAOG,UAAUC,IAAI,uBAEjBC,kBAAoB,CAAC,SAAU,cAEnCf,MAAME,SAAQ,SAACC,+DACTa,MAAQ,sBAIZA,MAAQL,SAASC,cAAc,QACzBC,WAAUC,2BAJG,CAAC,sBAAuB,WAK3CE,MAAMC,iBAAkB,EAGnBF,kBAAkBG,SAASf,KAAKgB,WAGnCH,MAAMI,UAAYjB,KAAKA,KAAKkB,WAAWC,IAFvCN,MAAMI,UAAYjB,KAAKA,KAAKiB,cAM1BD,UAAYR,SAASC,cAAc,6BASvCO,UAAUN,WAAUC,+BARG,CACrB,QACA,aACA,WACA,eACA,QACA,SAGFK,UAAUC,UAAYjB,KAAKgB,cAGvBI,IAAMZ,SAASC,cAAc,OAC7BY,WAAa,CAAC,OAAQ,OACS,IAA/BrB,KAAKA,KAAKiB,UAAUK,QAAiBV,kBAAkBG,SAASf,KAAKgB,YACvEK,WAAWnB,KAAK,0BAElBkB,IAAIV,WAAUC,yBAAOU,YACrBD,IAAIG,OAAOV,OACXO,IAAIG,OAAOP,WAEXT,OAAOgB,OAAOH,QAGTb,8BAQmB,SAACiB,QAC3BA,OAASA,OAAOC,OAAOC,QAAQ,iBAAkB,QAG7CC,QAAW,eACRC,OAAOC,iBACH,MAELC,OAAS,IAAID,cAEfC,OAAOC,gBAAgB,IAAK,aAC5B,MAAOC,YACA,SAEF,EAVM,MAcXL,eACW,IAAIE,WACAE,gBAAgBP,OAAQ,aAC9BS,KAAK7B,eAId8B,IAAM1B,SAASC,cAAc,cACjCyB,IAAIjB,UAAYO,OACTU,SAQH/B,UAAY,SAACH,UACbmC,WAAa,UACjBA,WAAWnB,UAAYhB,KAAKgB,UAC5BmB,WAAWC,IAAMC,aAAarC,KAAKgB,UAAWhB,MAC9CmC,WAAWnC,KAAOA,KAEXmC,YAUH7B,YAAc,SAAdA,YAAeN,aACY,IAA3BA,KAAKC,mBACPD,KAAKI,WAAWL,SAAQ,SAACM,kBAChBC,YAAYD,cAGhBF,UAAUH,OASbqC,aAAe,SAAfA,aAAgBrB,UAAWhB,YACG,SAA9BA,KAAKsC,WAAWtB,UAEXqB,aADerC,KAAKsC,WAAWtB,UAAY,IAAMA,UAAY,IAC/BhB,KAAKsC,YAErCtB"}