{"version":3,"file":"multilingual.min.js","sources":["../src/multilingual.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     filter_multilingual/multilingual\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import libs\nimport ajax from \"core/ajax\";\nimport * as str from \"core/str\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n  // Autosave Translation String\n  let autsavedMsg = \"\";\n  str.get_string(\"t_autosaved\", \"filter_multilingual\").done((string) => {\n    autsavedMsg = string;\n  });\n\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    var support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      var parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n\n    // If DOMParser is supported, use it\n    if (support) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n\n    // Otherwise, fallback to old-school method\n    var dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * Toggle Autotranslate Button\n   */\n  const toggleAutotranslateButton = () => {\n    let checkboxItems = [];\n    checkboxes.forEach((e) => {\n      checkboxItems.push(e.checked);\n    });\n    let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n    window.console.log(checked);\n    if (config.autotranslate && checked) {\n      autotranslateButton.disabled = false;\n    } else {\n      autotranslateButton.disabled = true;\n    }\n  };\n\n  /**\n   * Select All Checkbox\n   */\n  const selectAll = document.querySelector(\".filter-multilingual_select-all\");\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n  selectAll.addEventListener(\"click\", (e) => {\n    // See if select all is checked\n    let checked = e.target.checked;\n    let checkboxes = document.querySelectorAll(\".filter-multilingual_select\");\n\n    // Check/uncheck checkboxes\n    if (checked) {\n      checkboxes.forEach((e) => {\n        e.checked = true;\n      });\n    } else {\n      checkboxes.forEach((e) => {\n        e.checked = false;\n      });\n    }\n    toggleAutotranslateButton();\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  const checkboxes = document.querySelectorAll(\".filter-multilingual_select\");\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".multilingual-autotranslate\"\n  );\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n     autotranslateButton.addEventListener(\"click\", () => {\n      document\n        .querySelectorAll(\".filter-multilingual_select:checked\")\n        .forEach((e) => {\n          let id = e.getAttribute(\"data-id\");\n          getTranslation(id);\n        });\n    });\n\n  /**\n   * Send for Translation to DeepL\n   * @param {Integer} id Translation ID\n   */\n  const getTranslation = (id) => {\n    // Get the editor\n    let editor = document.querySelector(\n      '.multilingual-editor[data-id=\"' + id + '\"]'\n    );\n\n    // Get the source text\n    let sourceText = document.querySelector(\n      '.filter-multilingual__source-text[data-id=\"' + id + '\"]'\n    ).innerHTML;\n\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", \"en\");\n    formData.append(\"target_lang\", config.lang);\n    formData.append(\"preserve_formatting\", 1);\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", \"xml\");\n    formData.append(\"split_sentences\", \"nonewlines\");\n\n    // DeepL URL\n    let url = \"https://api.deepl.com/v2/translate\";\n\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        var status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          // The request has been completed successfully\n          let data = JSON.parse(xhr.responseText);\n          window.console.log(\"deepl:\", id, data);\n          // Display translation\n          editor.innerHTML = data.translations[0].text;\n          // Save translation\n          saveTranslation(id, data.translations[0].text, editor);\n        } else {\n          // Oh no! There has been an error with the request!\n          window.console.log(\"error\", status);\n        }\n      }\n    };\n    xhr.open(\"POST\", url);\n    xhr.send(formData);\n  };\n\n  /**\n   * Save Translation to Moodle\n   * @param  {Integer} id Translation ID\n   * @param  {String} translation Translation Text\n   * @param  {Node} editor HTML Editor Node\n   */\n  const saveTranslation = (id, translation, editor) => {\n\n    // Success Message\n    const successMessage = () => {\n      editor.classList.add(\"filter-multilingual__success\");\n      // Add saved indicator\n      let indicator =\n        '<div class=\"filter-multilingual__success-message\" data-id=\"' +\n        id +\n        '\">' +\n        autsavedMsg +\n        \"</div>\";\n      editor.after(...stringToHTML(indicator));\n      // Remove success message after a few seconds\n      setTimeout(() => {\n        let indicatorNode = document.querySelector(\n          '.filter-multilingual__success-message[data-id=\"' + id + '\"]'\n        );\n        editor.parentNode.removeChild(indicatorNode);\n      }, 3000);\n    };\n\n    // Error Mesage\n    const errorMessage = () => {\n      editor.classList.add(\"filter-multilingual__error\");\n    };\n\n    // Submit the request\n    ajax.call([\n      {\n        methodname: \"filter_multilingual_update_translation\",\n        args: {\n          translation: [\n            {\n              id: id,\n              course_id: config.course_id, // eslint-disable-line\n              translation: translation,\n            },\n          ],\n        },\n        done: (data) => {\n          window.console.log(\"ws: \", id, data);\n          if (data.length > 0) {\n            successMessage();\n          } else {\n            errorMessage();\n          }\n        },\n        fail: (error) => {\n          window.console.log(\"error: \", error);\n          errorMessage();\n          editor.classList.addClass(\"filter-multilingual__error\");\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  document.querySelectorAll('.multilingual-editor [contenteditable=\"true\"]').forEach((editor) => {\n\n    // Save translation\n    editor.addEventListener(\"focusout\", () => {\n      let translation = editor.innerHTML;\n      let id = editor.closest('.multilingual-editor').getAttribute('data-id');\n      window.console.log(id, translation);\n\n      saveTranslation(id, translation, editor);\n    });\n\n    // Remove status classes\n    editor.addEventListener(\"click\", () => {\n      editor.classList.remove(\"filter-multilingual__success\");\n      editor.classList.remove(\"filter-multilingual__error\");\n    });\n  });\n\n};\n"],"names":["config","autsavedMsg","str","get_string","done","string","toggleAutotranslateButton","checkboxItems","checkboxes","forEach","e","push","checked","find","window","console","log","autotranslate","autotranslateButton","disabled","selectAll","document","querySelector","addEventListener","target","querySelectorAll","id","getAttribute","getTranslation","editor","sourceText","innerHTML","formData","FormData","append","lang","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","translations","text","saveTranslation","open","send","translation","successMessage","classList","add","indicator","after","DOMParser","parser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","setTimeout","indicatorNode","parentNode","removeChild","errorMessage","call","methodname","args","course_id","length","fail","error","addClass","closest","remove"],"mappings":"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"}