{"version":3,"file":"translatable.min.js","sources":["../src/translatable.js"],"sourcesContent":["/*\n * @module     filter_translatable/translatable\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import libs\nimport ajax from \"core/ajax\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} str The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (str) => {\n    // See if DOMParser is supported\n    var support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      var parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n\n    // If DOMParser is supported, use it\n    if (support) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(str, \"text/html\");\n      return doc.body.childNodes;\n    }\n\n    // Otherwise, fallback to old-school method\n    var dom = document.createElement(\"div\");\n    dom.innerHTML = str;\n    return dom;\n  };\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".translatable-autotranslate\"\n  );\n  if (config.autotranslate) {\n    autotranslateButton.classList.remove(\"d-none\");\n  } else {\n    autotranslateButton.parentNode.removeChild(autotranslateButton);\n  }\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n  autotranslateButton.addEventListener(\"click\", () => {\n    document.querySelectorAll(\".translatable-editor\").forEach((editor) => {\n      let id = editor.getAttribute(\"data-id\");\n      let text = editor.innerHTML;\n      let originalText = document.querySelector(\n        '.filter-translatable__source-text[data-id=\"' + id + '\"]'\n      ).innerHTML;\n\n      if (text === originalText) {\n        // Build the parms\n        let params = {\n          text: text,\n          source_lang: \"en\", // eslint-disable-line\n          target_lang: config.lang, // eslint-disable-line\n          preserve_formatting: 1, // eslint-disable-line\n          auth_key: config.apikey, // eslint-disable-line\n          tag_handling: \"xml\", // eslint-disable-line\n          split_sentences: \"nonewlines\", // eslint-disable-line\n        };\n\n        let queryString = Object.keys(params)\n          .map((key) => key + \"=\" + params[key])\n          .join(\"&\");\n\n        // Update the translation\n        let xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            var status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n              // The request has been completed successfully\n              let data = JSON.parse(xhr.responseText);\n              // Display translation\n              editor.innerHTML = data.translations[0].text;\n              // Save translation\n              saveTranslation(id, data.translations[0].text, editor);\n            } else {\n              // Oh no! There has been an error with the request!\n              window.console.log(\"error\", status);\n            }\n          }\n          // Eeditor.innerHTML = data.translations[0].text;\n        };\n        xhr.open(\"POST\", \"https://api.deepl.com/v2/translate\");\n        xhr.setRequestHeader(\n          \"Content-Type\",\n          \"application/x-www-form-urlencoded\"\n        );\n        xhr.send(queryString);\n      }\n    });\n  });\n\n  /**\n   * Save Translation to Moodle\n   * @param  {Integer} id Translation ID\n   * @param  {String} translation Translation Text\n   * @param  {Node} editor HTML Editor Node\n   */\n  const saveTranslation = (id, translation, editor) => {\n    // Success Message\n    const successMessage = () => {\n      editor.classList.add(\"filter-translatable__success\");\n      // Add saved indicator\n      let indicator =\n        '<div class=\"filter-translatable__success-message\" data-id=\"' +\n        id +\n        '\">Autosaved</div>';\n      editor.after(...stringToHTML(indicator));\n      // Remove success message after a few seconds\n      setTimeout(() => {\n        let indicatorNode = document.querySelector(\n          '.filter-translatable__success-message[data-id=\"' + id + '\"]'\n        );\n        editor.parentNode.removeChild(indicatorNode);\n      }, 3000);\n    };\n\n    // Error Mesage\n    const errorMessage = () => {\n      editor.classList.add(\"filter-translatable__error\");\n    };\n\n    // Submit the request\n    ajax.call([\n      {\n        methodname: \"filter_translatable_update_translation\",\n        args: {\n          translation: [\n            {\n              id: id,\n              course_id: config.course_id, // eslint-disable-line\n              translation: translation,\n            },\n          ],\n        },\n        done: (data) => {\n          window.console.log(\"data: \", data);\n          if (data.length > 0) {\n            successMessage();\n          } else {\n            errorMessage();\n          }\n        },\n        fail: (error) => {\n          window.console.log(\"error: \", error);\n          errorMessage();\n          editor.classList.addClass(\"filter-translatable__error\");\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  document.querySelectorAll(\".translatable-editor\").forEach((editor) => {\n    // Save translation\n    editor.addEventListener(\"focusout\", () => {\n      let id = editor.getAttribute(\"data-id\");\n      let translation = editor.innerHTML;\n\n      saveTranslation(id, translation, editor);\n    });\n\n    // Remove status classes\n    editor.addEventListener(\"click\", () => {\n      editor.classList.remove(\"filter-translatable__success\");\n      editor.classList.remove(\"filter-translatable__error\");\n    });\n  });\n\n  /**\n   * Add Editor to .translatable editor\n   */\n  document\n    .querySelectorAll(\".translatable-editor.format-html\")\n    .forEach((editor) => {\n      let id = editor.getAttribute(\"data-id\");\n\n      let controls =\n        '<div class=\"filter-translatable__editor-tools\" data-id=\"' +\n        id +\n        '\">' +\n        '<div class=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">' +\n        '<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Formatting\">' +\n        '<button data-method=\"h2\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-type-h2\"></i></button>' +\n        '<button data-method=\"h3\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-type-h3\"></i></button>' +\n        '<button data-method=\"p\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-paragraph\"></i></button>' +\n        \"</div>\" +\n        '<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Lists\">' +\n        '<button data-method=\"ol\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-list-ol\"></i></button>' +\n        '<button data-method=\"ul\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-list-ul\"></i></button>' +\n        \"</div>\" +\n        '<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Basic example\">' +\n        '<button data-method=\"b\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-type-bold\"></i></button>' +\n        '<button data-method=\"i\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-type-italic\"></i></button>' +\n        '<button data-method=\"u\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-type-underline\"></i></button>' +\n        \"</div>\" +\n        '<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Links\">' +\n        '<button data-method=\"l\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-link-45deg\"></i></button>' +\n        \"</div>\" +\n        // '<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Links\">' +\n        // '<button data-method=\"html\" type=\"button\" class=\"t-editor-button btn btn-light\"><i class=\"bi-code-slash\"></i></button>' +\n        // \"</div>\" +\n        \"</div>\" +\n        \"</div>\";\n\n      editor.parentNode.prepend(...stringToHTML(controls));\n    });\n\n  /**\n   * Switch Translation Language\n   */\n  let localeSwitcher = document.querySelector(\".translatable-locale-switcher\");\n  localeSwitcher.addEventListener(\"change\", (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"course_lang\", e.target.value);\n    let newUrl = url.toString();\n\n    window.location = newUrl;\n  });\n\n  /**\n   * Detect Editor Button Click\n   */\n  document.querySelectorAll(\".t-editor-button\").forEach((button) => {\n    button.addEventListener(\"click\", () => {\n      // @todo let id = button.closest('.filter-translatable__editor-tools').getAttribute('data-id');\n      let method = button.getAttribute(\"data-method\");\n      // @todo let editor = document.querySelector('.translatable-editor[data-id=\"' + id + '\"]');\n      // @todo let html = editor.innerHTML;\n\n      switch (method) {\n        case \"h2\":\n          document.execCommand(\"formatBlock\", false, \"<h2>\");\n          break;\n        case \"h3\":\n          document.execCommand(\"formatBlock\", false, \"<h3>\");\n          break;\n        case \"p\":\n          document.execCommand(\"formatBlock\", false, \"<p>\");\n          break;\n        case \"ol\":\n          document.execCommand(\"insertOrderedList\");\n          break;\n        case \"ul\":\n          document.execCommand(\"insertUnorderedList\");\n          break;\n        case \"b\":\n          document.execCommand(\"bold\");\n          break;\n        case \"i\":\n          document.execCommand(\"italic\");\n          break;\n        case \"u\":\n          document.execCommand(\"underline\");\n          break;\n        case \"l\":\n          var link = prompt(\"Enter a URL:\", \"https://\");\n          document.execCommand(\"createLink\", false, link);\n          break;\n        default:\n          break;\n      }\n    });\n  });\n};\n"],"names":["config","stringToHTML","str","support","window","DOMParser","parser","parseFromString","err","body","childNodes","dom","document","createElement","innerHTML","autotranslateButton","querySelector","autotranslate","classList","remove","parentNode","removeChild","addEventListener","querySelectorAll","forEach","editor","id","getAttribute","text","params","source_lang","target_lang","lang","preserve_formatting","auth_key","apikey","tag_handling","split_sentences","queryString","Object","keys","map","key","join","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","translations","saveTranslation","console","log","open","setRequestHeader","send","translation","errorMessage","add","call","methodname","args","course_id","done","length","indicator","after","setTimeout","indicatorNode","successMessage","fail","error","addClass","controls","prepend","e","url","URL","location","href","searchParams","set","target","value","newUrl","toString","button","execCommand","link","prompt"],"mappings":"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"}